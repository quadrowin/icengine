<?php/** * Базовый класс контроллера * * @author goorus, morph */class Controller_Abstract{    /**	 * Конфиг контроллера     *	 * @var array	 */	protected $config = array();    	/**	 * Последний вызванный экшен. В случае, если был вызван replaceAction,     * может отличаться от $task     *	 * @var string	 */	protected $currentAction;	/**	 * Входные данные     *	 * @var Data_Transport	 */	protected $input;    /**     * Хелпер контроллера     *      * @var Helper_Abstract     */    protected static $helper;    	/**	 * Выходные данные     *	 * @var Data_Transport	 */	protected $output;        /**     * Локатор сервисов     *     * @var Service_Locator     */    protected static $serviceLocator;	/**	 * Текущая задача     *	 * @var Controller_Task	 */	protected $task;	/**	 * Загружает и возвращает конфиг для контроллера     *	 * @return Objective	 */	public function config()	{		if (is_array($this->config)) {			$configManager = $this->getService('configManager');            $this->config = $configManager->get(                get_class($this), $this->config			);		}		return $this->config;	}    /**     * Получить аннотацию текущего контроллера     *     * @return Annotation_Set     */    public function getAnnotations()    {        return $this->getService('helperAnnotation')->getAnnotation($this);    }    /**     * Получить текущий входной транспорт     *	 * @return Data_Transport	 */	public function getInput()	{		return $this->input;	}    /**     * Получить название контроллера без префикса Controller_     *     * @return string     */    public function getName()    {        return substr(get_class($this), strlen('Controller_'));    }    /**     * Получить текущий выходной транспорт     *	 * @return Data_Transport	 */	public function getOutput()	{		return $this->output;	}    /**     * Получить услугу по имени     *     * @param string $serviceName     * @return mixed     */    public function getService($serviceName)    {        if (!self::$serviceLocator) {            self::$serviceLocator = IcEngine::serviceLocator();        }        return self::$serviceLocator->getService($serviceName);    }    /**     * Получить сервис локатор     *     * @return Service_Locator     */    public function getServiceLocator()    {        return self::$serviceLocator;    }	/**	 * Возвращает текущую задачу контролера     *	 * @return Controller_Task	 */	public function getTask()	{		return $this->task;	}        /**     * Получить хелпер контроллера     *      * @return Helper_Abstract     */    public function helper()    {        if (is_null(static::$helper)) {            static::$helper = new Helper_Controller();        }        return static::$helper;    }	/**	 * Имя контроллера (без приставки Controller_)     *	 * @return string	 */	final public function name()	{		return substr(get_class($this), strlen('Controller_'));	}	/**	 * Заменить текущий экшн с передачей всех параметров     *     * @param string $controller     * @param string $action	 */	public function replaceAction($controller, $action = 'index')	{		if ($controller instanceof Controller_Abstract) {			$other = $controller;			$controller = $other->name();		} else {            $controllerManager = $this->getService('controllerManager');			$other = $controllerManager->get($controller);		}        $controllerAction = implode('/', $this->task->controllerAction());        $this->input->send(array('origin' => $controllerAction));        $eventManager = $this->getService('eventManager');        $signal = $eventManager->getSignal($controllerAction);        $slot = $eventManager->getSlot('Controller_After');        $signal->unbind($slot);		if ('Controller_' . $controller != get_class($this)) {            $controller = $other;			$controller->setInput($this->input);			$controller->setOutput($this->output);            $controller->setTask($this->task);		} else {            $controller = $this;        }        $this->task->setControllerAction(array(            'controller'    => $controller->name(),            'action'        => $action        ));        $helper = $this->helper();        $this->task->setCallable($controller, $action);        $helper->invokeArgs($controller, $action);        $this->task->setTemplate($helper->getTemplate($controller, $action));    }	    /**     * Завершение работы контроллера ошибкой     *     * @param string $text Текст ошибки. Не отображается пользователю,     * виден в консоли отладки.     * @param string $method Экшен, в котором произошла ошибка (__METHOD__)     * или шаблон (в этому случае метод будет взять из _currentAction).     * Необходим для определения шаблона. Если не передан, будет     * взято из $text.     * @param bool|string $tpl [optional] Шаблон.     */	public function sendError($text, $method = null, $tpl = false)	{        $error = array(            'text'	=> $text,            'tpl'	=> $tpl        );		$this->output->send(array(			'error'	=> $error		));        $this->task->appendError($text);		if (!is_bool($tpl)) {			$this->task->setClassTpl($method, $tpl);		} elseif ($method) {			if (strpos($method, '/') === false) {				$this->task->setClassTpl(                    $this->currentAction, '/' . ltrim($method, '/')				);			} else {				$this->task->setClassTpl($method);			}		}	}	/**	 * Устанавливает транспорт входных данных     *	 * @param Data_Transport $input	 * @return Controller_Abstract	 */	public function setInput($input)	{		$this->input = $input;		return $this;	}    /**     * Изменить хелпер контроллера     *      * @param Helper_Abstract $helper     */    public function setHelper($helper)    {        static::$helper = $helper;    }        /**	 * Заменить текущую задачу контроллера     *	 * @param Controller_Task $task	 * @return Controller_Abstract	 */	public function setTask($task)	{		$this->task = $task;		return $this;	}    	/**	 * Устанавливает транспорт выходных данных     *	 * @param Data_Transport $output	 * @return Controller_Abstract	 */	public function setOutput($output)	{		$this->output = $output;		return $this;	}    /**     * Изменить локатор сервисов     *     * @param Service_Locator $serviceLocator     */    public function setServiceLocator($serviceLocator)    {        self::$serviceLocator = $serviceLocator;    }}