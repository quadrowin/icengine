<?php

require_once dirname(__FILE__) . '/../../../Class/Paginator.php';

/**
 * Test class for Paginator.
 * Generated by PHPUnit on 2011-07-12 at 03:05:29.
 */
class PaginatorTest extends PHPUnit_Framework_TestCase {



	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @todo Implement testBuildPages().
	 */
	public function testBuildPages() {
		$p = new Paginator (0);
		
		$p->pages = -1;
		
		$this->assertNull ($p->buildPages());
		
		$_GET ['page'] = 2;
		$_GET ['limit'] = 10;
		
		$p = $this->getService('paginator')->fromGet (1000);
		
		$p->buildPages ();
		
		$r = $p->pages;
		
		$this->assertEquals ($r [0]['title'], 1);
		
		$this->assertEquals ($r [3]['title'], 4);
		
		$this->assertEquals ($r [2]['next'], true);
		
		$this->assertEquals ($r [2]['prev'], false);
		
		$this->assertEquals ($r [0]['prev'], true);
		
		$this->assertEquals ($r [1]['selected'], true);
		
		$this->assertEquals ($r [3]['next'], false);
		
		$this->assertEquals ($r [4]['title'], '...');
		
		$this->assertEquals ($r [4]['prev'], false);
		
		$this->assertArrayNotHasKey ('href', $r [4]);
		
		$this->assertEquals ($r [3]['href'], '/?page=4');
		
		$_SERVER ['REQUEST_URI'] = '/index.php?show=1';
		
		$p = $this->getService('paginator')->fromGet (1000);
		
		$p->buildPages ();
		
		$r = $p->pages;
		
		$this->assertEquals ($r [3]['href'], '/index.php?show=1&page=4');
	}

	/**
	 * @todo Implement testFromGet().
	 */
	public function testFromGet() {
		$p = $this->getService('paginator')->fromGet ();
		
		$this->assertEquals (0, $p->getIndex ());
		
		$_GET ['page'] = 2;
		
		$p = $this->getService('paginator')->fromGet ();
		
		$this->assertEquals ($p->pageLimit, $p->getIndex ());
		
		$_GET ['limit'] = 10;
		
		$p = $this->getService('paginator')->fromGet ();
		
		$this->assertEquals (10, $p->getIndex ());
		
		$_GET ['page'] = 3;
		
		$p = $this->getService('paginator')->fromGet (100);
		
		$this->assertEquals (20, $p->getIndex ());
	}

	/**
	 * @todo Implement testFromInput().
	 */
	public function testFromInput() {
		$t = new Data_Transport ();
		$t->appendProvider (new Data_Provider_Get ());
		
		$p = $this->getService('paginator')->fromInput ($t);
		
		$this->assertEquals (0, $p->getIndex ());
		
		$_GET ['page'] = 2;
		
		$p = $this->getService('paginator')->fromInput ($t);
		
		$this->assertEquals ($p->pageLimit, $p->getIndex ());
		
		$_GET ['limit'] = 10;
		
		$p = $this->getService('paginator')->fromInput ($t);
		
		$this->assertEquals (10, $p->getIndex ());
		
		$_GET ['page'] = 3;
		
		$p = $this->getService('paginator')->fromInput ($t, 100);
		
		$this->assertEquals (20, $p->getIndex ());
	}

	/**
	 * @todo Implement testGetIndex().
	 */
	public function testGetIndex() {
		$p = new Paginator (0);
		
		$this->assertEquals (0, $p->getIndex ());
		
		$p = new Paginator (1);
		
		$this->assertEquals (0, $p->getIndex ());
		
		$p = new Paginator (2);
		
		$this->assertEquals ($p->pageLimit, $p->getIndex ());
	}

	/**
	 * @todo Implement testOffset().
	 */
	public function testOffset() {
		$p = new Paginator (0);
		
		$this->assertEquals (0, $p->offset ());
		
		$p = new Paginator (1);
		
		$this->assertEquals (0, $p->offset ());
		
		$p = new Paginator (2);
		
		$this->assertEquals ($p->pageLimit, $p->offset ());
	}

	/**
	 * @todo Implement testPagesCount().
	 */
	public function testPagesCount() {
		$p = $this->getService('paginator')->fromGet (100);
		
		$this->assertEquals ($p->pagesCount (), 4);
		
		$_GET ['limit'] = 10;
		
		$p = $this->getService('paginator')->fromGet (100);
		
		$this->assertEquals ($p->pagesCount (), 10);
		
		$p = $this->getService('paginator')->fromGet (1);
		
		$this->assertEquals ($p->pagesCount (), 1);
		
		$p = $this->getService('paginator')->fromGet (0);
		
		$this->assertEquals ($p->pagesCount (), 0);
		
		$_GET ['limit'] = 0;
		
		$p = $this->getService('paginator')->fromGet (0);
		
		$p->pageLimit = 0;
		
		$this->assertEquals ($p->pagesCount (), 1);
	}

}

?>
