<?php

require_once dirname(__FILE__) . '/../../../Class/Query.php';

/**
 * Test class for Query.
 * Generated by PHPUnit on 2011-07-12 at 09:28:44.
 */
class QueryTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Query
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {

	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @todo Implement test__toString().
	 */
	public function test__toString() {
		
	}

	/**
	 * @todo Implement testCalcFoundRows().
	 */
	public function testCalcFoundRows() {
		
		$query = Query::instance ()->calcFoundRows ();
		$this->assertEquals ($query->part ('CALC_FOUND_ROWS'), true);
	}

	/**
	 * @todo Implement testDelete().
	 */
	public function testDelete() {
		
		$query = Query::instance ()->select (array ('qwer' => 'q'));
		$this->assertNull($query->part('DELETE'));
		$query->delete ();
		$this->assertEmpty($query->part('DELETE'));
	}

	/**
	 * @todo Implement testDistinct().
	 */
	public function testDistinct() {
		
		$query = Query::instance ()->distinct (true);
		$dist = $query->_parts;
		$this->assertEquals ($dist['DISTINCT'], true);
		
		$query = Query::instance ()->distinct (false);
		$dist = $query->_parts;
		$this->assertEmpty ($dist['DISTINCT']);
		
	}

	/**
	 * @todo Implement testFrom().
	 */
	public function testFrom() {
		
		$query = Query::instance ()->from ('test');
		$res = $query->part ('FROM');
		
		$this->assertEquals ('test', $res['test']['TABLE']);
		
		$query = Query::instance ()->from ('test','alias');
		$res = $query->part ('FROM');
		$this->assertEquals ('test', $res['alias']['TABLE']);
	}

	/**
	 * @todo Implement testGetPart().
	 */
	public function testGetPart() {
		$this->assertNull (Query::instance ()->getPart ('wrewqrwr'));
		$this->assertNotNull (
			Query::instance ()
				->from('Test')
				->getPart('FROM')
		);
	}

	/**
	 * @todo Implement testGroup().
	 */
	public function testGroup () {
		$query = Query::instance ()->group ('name');
		$group = $query->part('GROUP');
		$arr = array ();
		$arr[] = 'name';
		$this->assertEquals ($group, $arr);
		
		$query = Query::instance ()->group (null);
		$group = $query->part('GROUP');
		$this->assertEmpty($group[0]);
		
		$query = Query::instance ()->group ('name1', 'name2');
		$group = $query->part('GROUP');
		$arr = array ();
		$arr[] = 'name1';
		$arr[] = 'name2';
		$this->assertEquals ($group, $arr);
	}

	/**
	 * @todo Implement testInstance().
	 */
	public function testInstance() {
		
		$this->assertEquals (new Query (), Query::instance ());
	}

	/**
	 * @todo Implement testInsert().
	 */
	public function testInsert() {
		
		$query = Query::instance ()->insert ('Test');
		$insert = $query->part ('INSERT');
		$this->assertEquals ($insert, 'Test');
	}

	/**
	 * @todo Implement testInnerJoin().
	 */
	public function testInnerJoin() {
		$query = Query::instance ()->innerJoin ('Test', 'condition');
		
		$res = $query->_parts;
		
		$this->assertEquals($res['FROM']['Test']['TABLE'], 'Test');
		$this->assertEquals($res['FROM']['Test']['WHERE'], 'condition');
		$this->assertEquals($res['FROM']['Test']['JOIN'], 'INNER JOIN');
		
		$query = Query::instance ()->innerJoin ('Test', null);
		
		$res = $query->_parts;
		
		$this->assertEquals($res['FROM']['Test']['TABLE'], 'Test');
		$this->assertNull($res['FROM']['Test']['WHERE']);
		$this->assertEquals($res['FROM']['Test']['JOIN'], 'INNER JOIN');
		
		$query = Query::instance ()->innerJoin (null, null);
		
		$res = $query->_parts;
		
		$this->assertEmpty($res['FROM']);
	}

	/**
	 * @todo Implement testLeftJoin().
	 */
	public function testLeftJoin() {
		
		$query = Query::instance ()->leftJoin ('Test', 'condition');
		
		$res = $query->_parts;
		
		$this->assertEquals($res['FROM']['Test']['TABLE'], 'Test');
		$this->assertEquals($res['FROM']['Test']['WHERE'], 'condition');
		$this->assertEquals($res['FROM']['Test']['JOIN'], 'LEFT JOIN');
		
		$query = Query::instance ()->leftJoin ('Test', null);
		
		$res = $query->_parts;
		
		$this->assertEquals($res['FROM']['Test']['TABLE'], 'Test');
		$this->assertNull($res['FROM']['Test']['WHERE']);
		$this->assertEquals($res['FROM']['Test']['JOIN'], 'LEFT JOIN');
		
		$query = Query::instance ()->leftJoin (null, null);
		
		$res = $query->_parts;
		
		$this->assertEmpty($res['FROM']);
	}

	/**
	 * @todo Implement testOrder().
	 */
	public function testOrder() {
		
		$query = Query::instance ()->order ('name');
		$order = $query->part('ORDER');
		$arr[] = array ('name', 'ASC');
		$this->assertEquals ($order, $arr);
		
		$query = Query::instance ()->order (null);
		$order = $query->part('ORDER');

		$this->assertEmpty($order[0][0]);
		
		$query = Query::instance ()->order ('name1', 'name2');
		$order = $query->part('ORDER');
		$arr = array ();
		$arr[] = array ('name1', 'ASC');
		$arr[] = array ('name2', 'ASC');
		$this->assertEquals ($order, $arr);  
	}

	/**
	 * @todo Implement testOrWhere().
	 */
	public function testOrWhere() {
		
		$query = Query::instance ()->orWhere('id = 5');
		$res = $query->_parts;
		$arr[] = array (
			'0' => 'OR',
			'WHERE' => 'id = 5'
		);
	
		$this->assertEquals ($arr, $res['WHERE']);
		
		$arr = null;
		
		$query = Query::instance ()->orWhere('id','5');
		$res = $query->_parts;
		$arr[] = array (
					'OR',
					'WHERE' => 'id',
					'VALUE'  => '5'
			);
	
		$this->assertEquals ($arr, $res['WHERE']);
	}

	/**
	 * @todo Implement testPart().
	 */
	public function testPart() {
		
		$query = Query::instance ()-> from ('Test');
		
		$res = $query->part ('FROM');
		
		$this->assertNotEmpty ($res['Test']['TABLE']);
		$this->assertNotEmpty ($res['Test']['JOIN']);
	}

	/**
	 * @todo Implement testParts().
	 */
	public function testParts() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testReplace().
	 */
	public function testReplace() {
		
		$query = Query::instance ()->replace ('Test');
		$replace = $query->_parts;
		$this->assertEquals ($replace['REPLACE'], 'Test' );
		
	}

	/**
	 * @todo Implement testReset().
	 */
	public function testReset() {
		
		$query = Query::instance ()->from('Test');
		$query->reset ();
		$this->assertEquals ($query->_parts, Query::$_defaults);
	}

	/**
	 * @todo Implement testResetPart().
	 */
	public function testResetPart() {
		
		$query = Query::instance ()->from ('Test');
		$query->resetPart ('FROM');
		$this->assertEmpty ($query->part ('FROM'));
	}

	/**
	 * @todo Implement testSelect().
	 */
	public function testSelect() {
		$query = Query::instance ()->select(array (
			'name' => 'n',
			'email' => 'e',
			'qwerty'
		));
		
		$arr = array (
			'n' => array (
				'name', 'n'
			),
			'e' => array (
				'email', 'e'
			),
			'qwerty' => array (
				'0', 'qwerty'
			),
		);
		$this->assertEquals ($arr, $query->part('SELECT')); 
	}

	/**
	 * @todo Implement testSet().
	 */
	public function testSet() {
		$query = Query::instance ()->set ('name', 5);
		$this->assertEquals ($query->part ('VALUES'), array ('name' => 5));
		
		$query->set ('name', 5);
		$this->assertEquals ($query->part ('VALUES'), array ('name' => 5));
	}

	/**
	 * @todo Implement testSetPart().
	 */
	public function testSetPart() {
		
	}

	/**
	 * @todo Implement testShow().
	 */
	public function testShow() {
		
		$query = Query::instance()->show ('name');
		$this->assertEquals ($query->part('SHOW'), 'name');
		$query->show ('name2');
		$this->assertEquals ($query->part('SHOW'),  'name2');
		$query->show (null);
		$this->assertEmpty ($query->part('SHOW')); 
	}

	/**
	 * @todo Implement testSingleInnerJoin().
	 */
	public function testSingleInnerJoin() {
		
		$query = Query::instance ()->singleInnerJoin ('Test', 'condition');
		$res = $query->part ('FROM');
		$this->assertEquals ($res['Test']['TABLE'], 'Test');
		$this->assertEquals ($res['Test']['WHERE'], 'condition');
		$this->assertEquals ($res['Test']['JOIN'], 'INNER JOIN');
		
		$query->singleInnerJoin ('Test', 'condition2');
		$res = $query->part ('FROM');
		$this->assertEquals ($res['Test']['TABLE'], 'Test');
		$this->assertNotEquals ($res['Test']['WHERE'], 'condition2');
		$this->assertEquals ($res['Test']['WHERE'], 'condition');
		$this->assertEquals ($res['Test']['JOIN'], 'INNER JOIN');
		
	}

	/**
	 * @todo Implement testSingleLeftJoin().
	 */
	public function testSingleLeftJoin() {
		
		$query = Query::instance ()->singleLeftJoin ('Test', 'condition');
		$res = $query->part ('FROM');
		$this->assertEquals ($res['Test']['TABLE'], 'Test');
		$this->assertEquals ($res['Test']['WHERE'], 'condition');
		$this->assertEquals ($res['Test']['JOIN'], 'LEFT JOIN');
		
		$query->singleLeftJoin ('Test', 'condition2');
		$res = $query->part ('FROM');
		$this->assertEquals ($res['Test']['TABLE'], 'Test');
		$this->assertNotEquals ($res['Test']['WHERE'], 'condition2');
		$this->assertEquals ($res['Test']['WHERE'], 'condition');
		$this->assertEquals ($res['Test']['JOIN'], 'LEFT JOIN');
	}

	/**
	 * @todo Implement testToCountQuery().
	 */
	public function testToCountQuery() {
		
		$query = Query::instance ()->toCountQuery ();
		$this->assertEquals (
				$query->part('SELECT'), 
				array ( "COUNT(1) AS `count`" => "COUNT(1) AS `count`" )
		);
	}

	/**
	 * @todo Implement testTranslate().
	 */
	public function testTranslate() {
		
		$query = Query::instance ()->from('Test')->where ('condition');	
		$this->assertEquals  ($query->translate (), 'SELECT    FROM `ice_test` AS `Test` WHERE condition   ');
		
		$query = Query::instance ()->from('Test')->where ('condition');
		$this->assertEquals  ($query->translate ('Mysql'), 'SELECT    FROM `ice_test` AS `Test` WHERE condition   ');
	}

	/**
	 * @todo Implement testType().
	 */
	public function testType() {
		$query = Query::instance ()->from('Test');
		$this->assertEquals  ($query->type (), 'SELECT');
	}

	/**
	 * @todo Implement testLimit().
	 */
	public function testLimit() {
		$query = Query::instance ()->limit ();
		$this->assertEquals($query->part('LIMITCOUNT'), 0);
		$this->assertEquals($query->part('LIMITOFFSET'), 0);
		
		$query = Query::instance ()->limit (10);
		$this->assertEquals($query->part('LIMITCOUNT'), 10);
		$this->assertEquals($query->part('LIMITOFFSET'), 0);
		
		$query = Query::instance ()->limit (10, 20);
		$this->assertEquals($query->part('LIMITCOUNT'), 10);
		$this->assertEquals($query->part('LIMITOFFSET'), 20);
		
		$query = Query::instance ()->limit (null);
		$this->assertNotNull($query->part('LIMITCOUNT'));
		$this->assertEquals($query->part('LIMITCOUNT'), 0);
		$this->assertEquals($query->part('LIMITOFFSET'), 0); 
		
		$query = Query::instance ()->limit (null, null);
		$this->assertNotNull($query->part('LIMITCOUNT'));
		$this->assertEquals($query->part('LIMITCOUNT'), 0);
		$this->assertEquals($query->part('LIMITOFFSET'), 0); 
	}

	/**
	 * @todo Implement testUpdate().
	 */
	public function testUpdate() {
		
		$query = Query::instance ()->update ('Test');
		$this->assertEquals ($query->part('UPDATE'), 'Test');
		
		$query->update ('Test2');
		$this->assertEquals ($query->part('UPDATE'), 'Test2');
		
	}

	/**
	 * @todo Implement testUseIndex().
	 */
	public function testUseIndex() {
		
		$query = Query::instance ()->useIndex (10);
		$this->assertEquals ($query->part('INDEX'), array(10));
		
	}

	/**
	 * @todo Implement testValues().
	 */
	public function testValues() {
		
		$arr = array (
			'id' => 10
		);
		$query = Query::instance ()->values ($arr);
		
		$this->assertEquals ($query->part('VALUES'), $arr);
		
		$arr = array (
			'id'       => 10,
			'name' => 'test'
		);
		$query = Query::instance ()->values ($arr);
		
		$this->assertEquals ($query->part('VALUES'), $arr);
	}

	/**
	 * @todo Implement testWhere().
	 */
	public function testWhere() {
		
		$query = Query::instance ()->where('id = 5');
		$res = $query->_parts;
		$arr[] = array (
					'AND',
					'WHERE' => 'id = 5'
			);
	
		$this->assertEquals ($arr, $res['WHERE']);
		$arr = null;
		
		$query = Query::instance ()->where('id','5');
		$res = $query->_parts;
		$arr[] = array (
					'AND',
					'WHERE' => 'id',
					'VALUE'  => '5'
			);
	
		$this->assertEquals ($arr, $res['WHERE']);
	}

}

?>
