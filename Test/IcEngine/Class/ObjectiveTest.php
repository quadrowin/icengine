<?php

require_once dirname(__FILE__) . '/../../../Class/Objective.php';

/**
 * Test class for Objective.
 * Generated by PHPUnit on 2011-07-11 at 09:38:08.
 */

class Objective_Child extends Objective 
{
	public $a = 5;
	public $b = 6;
	public $_c = 7;
}

class ObjectiveTest extends PHPUnit_Framework_TestCase {

	/**
	 * @var Objective
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp() {
		$this->object = new Objective;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown() {
		
	}

	/**
	 * @todo Implement test__toArray().
	 */
	public function test__toArray() {
		$a = array ();
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$a = array ('a' => 5, 'b' => 2, 'c' => 3);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$a = array ('a' => 5, 'b' => array ('a' => 1, 'c' => 2), 'c' => array ('c' => array ('5')));
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$a = array (5);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$a = array (null, 0);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$a = array (null => 0);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($a, $obj->__toArray ());
		
		$b = new Objective (array ('a' => 5, 'b' => 3, 'c' => array ('a' => 1)));
		
		$a = array ('a' => 1, 'b' => $b);
		
		$obj = new Objective ($a);
		
		$this->assertNotEquals ($a, $obj->__toArray ());
		
		$a = array ('a' => 1, 'c' => 2);
		
		$obj = new Objective_Child ($a);
		
		$this->assertEquals (array ('a' => 1, 'b' => 6, 'c' => 2), $obj->__toArray ());
	}

	/**
	 * @todo Implement test__clone().
	 */
	public function test__clone() {
		$a = new Objective (array ('a' => 1, 'b' => 2));
		
		$this->assertEquals ($a, clone $a);
		
		$a = new Objective (array (null, 0));
		
		$this->assertEquals ($a, clone $a);
		
		$a = new Objective (array (null => 0));
		
		$this->assertEquals ($a, clone $a);
		
		$b = new Objective (array ('a' => 1));
		
		$a = new Objective (array ('a' => 1, 'b' => $b));
		
		$this->assertEquals ($a, clone $a);
	}

	/**
	 * @todo Implement test__get().
	 */
	public function test__get() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement test__set().
	 */
	public function test__set() {
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete(
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testAsArray().
	 */
	public function testAsArray() {
		$obj = new Objective (array ());
		
		$this->assertEquals ($obj->asArray (), array ());
		
		$obj = new Objective (array (null));
		
		$this->assertEquals ($obj->asArray (), array (null));
		
		$b = new Objective (array ('a' => 1));
		
		$a = array ('a' => 1, 'b' => $b);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($obj->asArray (), $a);
	}

	/**
	 * @todo Implement testColumn().
	 */
	public function testColumn() {
		$a = array ();
		
		$obj = new Objective ($a);
		
		$this->assertEmpty ($obj->column ('a'));
		
		$a = array (null);
		
		$obj = new Objective ($a);
		
		$this->assertNotEmpty ($obj->column ('a'));
		
		$a = array ('b' => 1);
		
		$obj = new Objective ($a);
		
		$this->assertNotEmpty ($obj->column ('a'));
		
		$a = array (array ('a' => 1), array ('a' => 2), array ('a' => 3));
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($obj->column ('a'), array (1, 2, 3));
	}

	/**
	 * @todo Implement testCount().
	 */
	public function testCount() {
		$a = array ();
		
		$obj = new Objective ($a);
		
		$this->assertEquals (0, $obj->count ());
		
		$a = array (null);
		
		$obj = new Objective ($a);
		
		$this->assertEquals (1, $obj->count ());
		
		$a = array (array (null => null));
		
		$obj = new Objective ($a);
		
		$this->assertEquals (1, $obj->count ());
		
		$a = array ('a' => 1, 'b' => 2, 'c' => 3);
		
		$obj = new Objective ($a);
		
		$this->assertEquals (3, $obj->count ());
		
		$a = array ('a' => 1, 'b' => 2, 'c' => array ('a' => 3));
		
		$obj = new Objective ($a);
		
		$this->assertEquals (3, $obj->count ());
	}

	/**
	 * @todo Implement testExists().
	 */
	public function testExists() {
		$a = array ();
		
		$obj = new Objective ($a);
		
		$this->assertFalse ($obj->exists ('a'));
		
		$a = array (null);
		
		$obj = new Objective ($a);
		
		$this->assertFalse ($obj->exists ('a'));
		
		$a = array (array (null => null));
		
		$obj = new Objective ($a);
		
		$this->assertFalse ($obj->exists (null));
		
		$a = array ('a' => 1, 'b' => 2, 'c' => 3);
		
		$obj = new Objective ($a);
		
		$this->assertTrue  ($obj->exists ('a'));
	}

	/**
	 * @todo Implement testGet().
	 */
	public function testGet() {
		$a = array ();
		
		$obj = new Objective ($a);
		
		$this->assertNull ($obj->get ('a'));
		
		$a = array (null => null);
		
		$obj = new Objective ($a);
		
		$this->assertNull ($obj->get (null));
		
		$a = array ('a' => 1, 'b' => 2, 'c' => 4);
		
		$obj = new Objective ($a);
		
		foreach ($a as $key => $value)
		{
			$this->assertEquals ($obj->get ($key), $value);
		}
		
		$a = array ('a' => 1, 'b' => array (array ('a' => array ('c' => 5)), array ('a' => 2)));
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($obj->get ('b/0/a/c'), 5);
		
		$this->assertNull ($obj->get ('b/0/a/e'));
		
		$a = array ('a' => 2, 'b' => 3);
		
		$obj = new Objective ($a);
		
		$this->assertEquals ($obj->a, 2);
		
		$obj->a = 11;
		
		$this->assertEquals ($obj->a, 11);
		
		$obj ['a'] = 22;
		
		$this->assertEquals ($obj->a, 22);
		
		$obj ['b'] = 4;
		
		foreach ($obj as $key=>$value)
		{
			$this->assertNotEquals ($value, $a [$key]);
		}
	}

	/**
	 * @todo Implement testGetIterator().
	 */
	public function testGetIterator() {

	}

	/**
	 * @todo Implement testOffsetSet().
	 */
	public function testOffsetSet() {
		
	}

	/**
	 * @todo Implement testIndexOf().
	 */
	public function testIndexOf() {
	
	}

	/**
	 * @todo Implement testOffsetExists().
	 */
	public function testOffsetExists() {

	}

	/**
	 * @todo Implement testOffsetUnset().
	 */
	public function testOffsetUnset() {

	}

	/**
	 * @todo Implement testOffsetGet().
	 */
	public function testOffsetGet() {

	}

}

?>
