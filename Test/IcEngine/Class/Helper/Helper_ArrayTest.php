<?php

require_once dirname (__FILE__) . '/../../../../Class/Helper/Array.php';

/**
 * Test class for Helper_Array.
 * Generated by PHPUnit on 2011-07-06 at 03:51:11.
 */
class Helper_ArrayTest extends PHPUnit_Framework_TestCase
{

	/**
	 * @var Helper_Array
	 */
	protected $object;

	/**
	 * Sets up the fixture, for example, opens a network connection.
	 * This method is called before a test is executed.
	 */
	protected function setUp ()
	{
		$this->object = new Helper_Array;
	}

	/**
	 * Tears down the fixture, for example, closes a network connection.
	 * This method is called after a test is executed.
	 */
	protected function tearDown ()
	{
		
	}

	/**
	 * @todo Implement testColumn().
	 */
	public function testColumn ()
	{
		$data = array (
			array (
				'a'	=> 1,
				'b'	=> 2,
				'c'	=> 4
			),
			array (
				'a'	=> 2,
				'b'	=> 3,
				'd'	=> 5
			)
		);
		
		$tests = array ('a', 'b');
		
		foreach ($tests as $test)
		{
			$column = Helper_Array::column ($data, $test);
			foreach ($column as $i => $v)
			{
				$this->assertEquals ($data [$i][$test], $v);
			}
		}
	}

	/**
	 * @todo Implement testMarkForColumns().
	 */
	public function testMarkForColumns ()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete (
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testMasort().
	 */
	public function testMasort ()
	{
		$data = array (
			array (
				'a'	=> 1,
				'b'	=> 2,
				'c'	=> 3
			),
			array (
				'a'	=> 2,
				'b'	=> 1,
				'c'	=> 3
			),
			array (
				'a'	=> 2,
				'b'	=> 3,
				'c'	=> 1
			)
		);
		
		// По возрастанию
		$tests = array ('a', 'b', 'c');
		foreach ($tests as $test)
		{
			Helper_Array::masort ($data, $test);
			$row = reset ($data);
			$last = $row [$test];
			
			foreach ($data as $row)
			{
				$this->assertLessThanOrEqual ($row [$test], $last);
				$last = $row [$test];
			}
		}
		
		// По убыванию
		$tests = array ('a', 'b', 'c');
		foreach ($tests as $test)
		{
			Helper_Array::masort ($data, $test . ' DESC');
			$row = reset ($data);
			$last = $row [$test];
			
			foreach ($data as $row)
			{
				$this->assertGreaterThanOrEqual ($row [$test], $last);
				$last = $row [$test];
			}
		}
	}

	/**
	 * @todo Implement testMergeReplaceRecursive().
	 */
	public function testMergeReplaceRecursive ()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete (
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testMosort().
	 */
	public function testMosort ()
	{
		// Remove the following lines when you implement this test.
		$this->markTestIncomplete (
				'This test has not been implemented yet.'
		);
	}

	/**
	 * @todo Implement testPrefixed().
	 */
	public function testPrefixed ()
	{
		$tests = array (
			array (
				'pref_0'	=> 1,
				'pref_1'	=> 2,
				'pref_some'	=> null,
				'pref_11'	=> null,
				null		=> 'test',
				'111'		=> 2222
			),
			array ()
		);
		
		$results = array (
			array (
				'0'		=> 1,
				'1'		=> 2,
				'some'	=> null,
				'11'	=> null
			),
			array ()
		);
		
		foreach ($tests as $i => $test)
		{
			$finded = Helper_Array::prefixed ($test, 'pref_');
			$this->assertEquals ($results [$i], $finded);
		}
	}

	/**
	 * @todo Implement testSetKeyColumn().
	 */
	public function testSetKeyColumn ()
	{
		$tests = array (
			array (
				array ('a' => 1, 'b' => 2, 'c' => 3),
				array ('a' => 10, 'b' => 20, 'c' => 30),
				array ('a' => 20, 'b' => 20, 'd' => 40)
			),
			array (
				array ('a' => 1, 'b' => 2)
			)
		);
		
		$results = array (
			array (
				1	=> array ('a' => 1, 'b' => 2, 'c' => 3),
				10	=> array ('a' => 10, 'b' => 20, 'c' => 30),
				20	=> array ('a' => 20, 'b' => 20, 'd' => 40)
			),
			array (
				1	=> array ('a' => 1, 'b' => 2)
			)
		);
		
		foreach ($tests as $i => $test)
		{
			$result = Helper_Array::setKeyColumn ($test, 'a');
			$this->assertEquals ($results [$i], $result);
		}
	}

}

?>
